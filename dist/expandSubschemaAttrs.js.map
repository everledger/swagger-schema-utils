{"version":3,"sources":["../src/expandSubschemaAttrs.js"],"names":["mapObject","obj","cb","newObj","forEach","k","createToplevelProperties","$refs","def","additionalProperties","extras","allOf","concat","anyOf","oneOf","length","properties","schema","prop","$ref","reference","get","paths","expandSubschemaProps","resolve","then","definitions"],"mappings":";;;;;;;;;;;;;;AAUA;;AACA;;;;;;AAXA;;;;;;;;;;AAaA,SAASA,SAAT,CAAmBC,GAAnB,EAAgCC,EAAhC,EAA6E;AAC3E,MAAMC,SAAS,EAAf;AACA,sBAAYF,GAAZ,EAAiBG,OAAjB,CAAyB,aAAK;AAC5BD,WAAOE,CAAP,IAAYH,GAAGD,IAAII,CAAJ,CAAH,EAAWA,CAAX,EAAcJ,GAAd,CAAZ;AACD,GAFD;AAGA,SAAOE,MAAP;AACD;;AAED;AACA,IAAMG,2BAA2B,kBAAM,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACrD,MAAIA,IAAIC,oBAAJ,KAA6B,KAAjC,EAAwC;AACtC,WAAOD,GAAP;AACD;;AAED,MAAME,SAAS,CAACF,IAAIG,KAAJ,IAAa,EAAd,EAAkBC,MAAlB,CAAyBJ,IAAIK,KAAJ,IAAa,EAAtC,EAA0CD,MAA1C,CAAiDJ,IAAIM,KAAJ,IAAa,EAA9D,CAAf;AACA,MAAI,CAACJ,OAAOK,MAAZ,EAAoB;AAClB,WAAOP,GAAP;AACD;;AAEDA,mCAAWA,GAAX,EAVqD,CAUnC;;AAElB,MAAI,CAACA,IAAIQ,UAAT,EAAqB;AACnBR,QAAIQ,UAAJ,GAAiB,EAAjB;AACD;;AAEDN,SAAON,OAAP,CAAe,kBAAU;AACvB,QAAIa,OAAOD,UAAX,EAAuB;AACrB,0BAAYC,OAAOD,UAAnB,EAA+BZ,OAA/B,CAAuC;AAAA,eAASI,IAAIQ,UAAJ,CAAeE,IAAf,IAAuB,EAAhC;AAAA,OAAvC;AACD;AACD,QAAID,OAAOE,IAAX,EAAiB;AACf,UAAMC,YAAYb,MAAMc,GAAN,CAAUd,MAAMe,KAAN,GAAc,CAAd,IAAmBL,OAAOE,IAApC,CAAlB;AACA,UAAIC,UAAUJ,UAAd,EAA0B;AACxB,4BAAYI,UAAUJ,UAAtB,EAAkCZ,OAAlC,CAA0C;AAAA,iBAASI,IAAIQ,UAAJ,CAAeE,IAAf,IAAuB,EAAhC;AAAA,SAA1C;AACD;AACF;AACF,GAVD;;AAYA,SAAOV,GAAP;AACD,CA7BgC,CAAjC;;AAgCA,IAAMe,uBAAuB,SAAvBA,oBAAuB,CAACN,MAAD,EAA4B;AACvDA,sCAAcA,MAAd,EADuD,CAC/B;AACxB,SAAO,wBAAcO,OAAd,CAAsBP,MAAtB,EAA8BQ,IAA9B,CAAmC,UAAClB,KAAD,EAAW;AACnDU,WAAOS,WAAP,GAAqB1B,UAAUiB,OAAOS,WAAjB,EAA8BpB,yBAAyBC,KAAzB,CAA9B,CAArB;AACA,WAAOU,MAAP;AACD,GAHM,CAAP;AAID,CAND;;kBAQeM,oB","file":"expandSubschemaAttrs.js","sourcesContent":["/**\n * Expands all sub-schema attributes into empty attributes at the parent level\n * if `additionalProperties` is used in the parent schema.\n *\n * @package: swagger-schema-utils\n * @author:  pospi <sam@everledger.io>\n * @since:   2016-11-01\n * @flow\n */\n\nimport { curry } from 'ramda';\nimport SwaggerParser from 'swagger-parser';\n\nfunction mapObject(obj: Object, cb: (v: any, k: string, obj: Object) => any) {\n  const newObj = {};\n  Object.keys(obj).forEach(k => {\n    newObj[k] = cb(obj[k], k, obj);\n  });\n  return newObj;\n}\n\n// @see http://stackoverflow.com/questions/22689900/ddg#23001194\nconst createToplevelProperties = curry(($refs, def) => {\n  if (def.additionalProperties !== false) {\n    return def;\n  }\n\n  const extras = (def.allOf || []).concat(def.anyOf || []).concat(def.oneOf || []);\n  if (!extras.length) {\n    return def;\n  }\n\n  def = { ...def }; // clone before manipulating\n\n  if (!def.properties) {\n    def.properties = {};\n  }\n\n  extras.forEach(schema => {\n    if (schema.properties) {\n      Object.keys(schema.properties).forEach(prop => (def.properties[prop] = {}));\n    }\n    if (schema.$ref) {\n      const reference = $refs.get($refs.paths()[0] + schema.$ref);\n      if (reference.properties) {\n        Object.keys(reference.properties).forEach(prop => (def.properties[prop] = {}));\n      }\n    }\n  });\n\n  return def;\n});\n\n\nconst expandSubschemaProps = (schema: Object): Object => {\n  schema = { ...schema }; // clone before manipulating\n  return SwaggerParser.resolve(schema).then(($refs) => {\n    schema.definitions = mapObject(schema.definitions, createToplevelProperties($refs));\n    return schema;\n  });\n};\n\nexport default expandSubschemaProps;\n"]}