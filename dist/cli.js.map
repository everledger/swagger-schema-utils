{"version":3,"sources":["../src/cli.js"],"names":["schemaPath","schema","modelFilter","writeFileSync","exportPath","dump","filter","expandedSchema","resolved","definitions","console","log","main","argv","require","usage","demand","alias","describe","e","f","s"],"mappings":";;;;;;;;;;;;;;;wEA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuB,0BAAWA,UAAX,CADvB;;AAAA;AACQC,kBADR;;AAAA,gBAGOC,WAHP;AAAA;AAAA;AAAA;;AAII,yBAAGC,aAAH,CAAiBC,UAAjB,EAA6B,iBAAKC,IAAL,CAAUJ,MAAV,CAA7B;AAJJ;AAAA;;AAAA;AAAA;AAAA,mBAOkC,2BAAYA,MAAZ,EAAoB,EAAEK,QAAQ,CAAC,OAAD,CAAV,EAApB,CAPlC;;AAAA;AAOUC,0BAPV,iBAO8EC,QAP9E;;AAQI,yBAAGL,aAAH,CAAiBC,UAAjB,EAA6B,iBAAKC,IAAL,CAAUE,eAAeE,WAAf,CAA2BP,WAA3B,CAAV,CAA7B;;AARJ;;AAWEQ,oBAAQC,GAAR,+BAAwCP,UAAxC;;AAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeQ,I;;;;;AArBf;;;;AACA;;AACA;;;;AAEA;;;;;;AAbA;;;;;;;;;AAeA,IAAMC,OAAOC,QAAQ,OAAR,EACVC,KADU,CACJ,+DADI,EAEVC,MAFU,CAEH,CAAC,GAAD,CAFG,EAGVC,KAHU,CAGJ,GAHI,EAGC,aAHD,EAIVC,QAJU,CAID,GAJC,EAII,0DAJJ,EAKVD,KALU,CAKJ,GALI,EAKC,cALD,EAMVC,QANU,CAMD,GANC,EAMI,+FANJ,EAOVD,KAPU,CAOJ,GAPI,EAOC,aAPD,EAQVC,QARU,CAQD,GARC,EAQI,uDARJ,EASVL,IATH;;AAWA,IAAMT,aAAaS,KAAKM,CAAxB;AACA,IAAMjB,cAAcW,KAAKO,CAAzB;AACA,IAAMpB,aAAaa,KAAKQ,CAAxB;;AAgBAT","file":"cli.js","sourcesContent":["\n/**\n * Command-line interface for schema formatting / exporting utilities.\n *\n * @package: swagger-schema-utils\n * @author:  pospi <sam@everledger.io>\n * @since:   2016-12-21\n * @flow\n */\n\nimport fs from 'fs';\nimport { resolveRefs } from 'json-refs';\nimport YAML from 'yaml-js';\n\nimport loadSchema from './loadSchema';\n\nconst argv = require('yargs')\n  .usage('Usage: $0 -e [export-path] -f [model-filter] -s [schema-path]')\n  .demand(['s'])\n  .alias('e', 'export-path')\n  .describe('e', 'Destination file path when exporting normalised schemas.')\n  .alias('f', 'model-filter')\n  .describe('f', 'A particular model from #definitions can be extracted separately by specifying its name here.')\n  .alias('s', 'schema-path')\n  .describe('s', 'Path to the root-level origin schema file to process.')\n  .argv;\n\nconst exportPath = argv.e;\nconst modelFilter = argv.f;\nconst schemaPath = argv.s;\n\nasync function main() {\n  const schema = await loadSchema(schemaPath);\n\n  if (!modelFilter) {\n    fs.writeFileSync(exportPath, YAML.dump(schema));\n  } else {\n    // bring in local refs first\n    const expandedSchema = (await resolveRefs(schema, { filter: ['local'] })).resolved;\n    fs.writeFileSync(exportPath, YAML.dump(expandedSchema.definitions[modelFilter]));\n  }\n\n  console.log(`Successfully exported to ${exportPath}`);\n}\n\nmain();\n"]}