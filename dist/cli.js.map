{"version":3,"sources":["../src/cli.js"],"names":["schema","schemaPath","lazyError","modelFilter","writeFileSync","exportPath","dump","withLocals","filter","expandedSchema","resolved","definitions","console","log","main","argv","require","usage","demand","alias","describe","e","f","s","error","inspect","colors","depth","process","exit"],"mappings":";;;;;;;;;;;;;;;wEAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACMA,kBADN;AAAA;AAAA;AAAA,mBAGmB,0BAAWC,UAAX,CAHnB;;AAAA;AAGID,kBAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAKIE;;AALJ;AAAA,gBAQOC,WARP;AAAA;AAAA;AAAA;;AASI,yBAAGC,aAAH,CAAiBC,UAAjB,EAA6B,iBAAKC,IAAL,CAAUN,MAAV,CAA7B;AATJ;AAAA;;AAAA;AAWI;AACIO,sBAZR;AAAA;AAAA;AAAA,mBAcyB,2BAAYP,MAAZ,EAAoB,EAAEQ,QAAQ,CAAC,OAAD,CAAV,EAApB,CAdzB;;AAAA;AAcMD,sBAdN;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAgBML;;AAhBN;AAkBUO,0BAlBV,GAkB4BF,UAAD,CAAaG,QAlBxC;;AAmBI,yBAAGN,aAAH,CAAiBC,UAAjB,EAA6B,iBAAKC,IAAL,CAAUG,eAAeE,WAAf,CAA2BR,WAA3B,CAAV,CAA7B;;AAnBJ;;AAsBES,oBAAQC,GAAR,+BAAwCR,UAAxC;;AAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeS,I;;;;;AA1Bf;;;;AACA;;AACA;;;;AAEA;;;;;;AAbA;;;;;;;;;AAeA,IAAMC,OAAOC,QAAQ,OAAR,EACVC,KADU,CACJ,+DADI,EAEVC,MAFU,CAEH,CAAC,GAAD,CAFG,EAGVC,KAHU,CAGJ,GAHI,EAGC,aAHD,EAIVC,QAJU,CAID,GAJC,EAII,0DAJJ,EAKVD,KALU,CAKJ,GALI,EAKC,cALD,EAMVC,QANU,CAMD,GANC,EAMI,+FANJ,EAOVD,KAPU,CAOJ,GAPI,EAOC,aAPD,EAQVC,QARU,CAQD,GARC,EAQI,uDARJ,EASVL,IATH;;AAWA,IAAMV,aAAaU,KAAKM,CAAxB;AACA,IAAMlB,cAAcY,KAAKO,CAAzB;AACA,IAAMrB,aAAac,KAAKQ,CAAxB;;AAEA,SAASrB,SAAT,CAAmBmB,CAAnB,EAAsB;AACpBT,UAAQY,KAAR,CAAcR,QAAQ,MAAR,EAAgBS,OAAhB,CAAwBJ,CAAxB,EAA2B,EAAEK,QAAQ,IAAV,EAAgBC,OAAO,IAAvB,EAA3B,CAAd;AACAC,UAAQC,IAAR,CAAa,CAAb;AACD;;AA2BDf","file":"cli.js","sourcesContent":["\n/**\n * Command-line interface for schema formatting / exporting utilities.\n *\n * @package: swagger-schema-utils\n * @author:  pospi <sam@everledger.io>\n * @since:   2016-12-21\n * @flow\n */\n\nimport fs from 'fs';\nimport { resolveRefs } from 'json-refs';\nimport YAML from 'yaml-js';\n\nimport loadSchema from './loadSchema';\n\nconst argv = require('yargs')\n  .usage('Usage: $0 -e [export-path] -f [model-filter] -s [schema-path]')\n  .demand(['s'])\n  .alias('e', 'export-path')\n  .describe('e', 'Destination file path when exporting normalised schemas.')\n  .alias('f', 'model-filter')\n  .describe('f', 'A particular model from #definitions can be extracted separately by specifying its name here.')\n  .alias('s', 'schema-path')\n  .describe('s', 'Path to the root-level origin schema file to process.')\n  .argv;\n\nconst exportPath = argv.e;\nconst modelFilter = argv.f;\nconst schemaPath = argv.s;\n\nfunction lazyError(e) {\n  console.error(require('util').inspect(e, { colors: true, depth: null }));\n  process.exit(1);\n}\n\nasync function main() {\n  let schema;\n  try {\n    schema = await loadSchema(schemaPath);\n  } catch (e) {\n    lazyError(e);\n  }\n\n  if (!modelFilter) {\n    fs.writeFileSync(exportPath, YAML.dump(schema));\n  } else {\n    // bring in local refs first\n    let withLocals;\n    try {\n      withLocals = await resolveRefs(schema, { filter: ['local'] });\n    } catch (e) {\n      lazyError(e);\n    }\n    const expandedSchema = (withLocals).resolved;\n    fs.writeFileSync(exportPath, YAML.dump(expandedSchema.definitions[modelFilter]));\n  }\n\n  console.log(`Successfully exported to ${exportPath}`);\n}\n\nmain();\n"]}