{"version":3,"sources":["../src/resolveExternalRefs.js"],"names":["filePath","resolve","reject","readFile","err","file","main","load","toString","options","filter","loaderOptions","processContent","res","callback","text","relativeBase","dirname","then","result","errs","refs","reduce","failures","ref","data","error","push","length","resolved","catch"],"mappings":";;;;;;;;;;;;;;kBAce,UAASA,QAAT,EAA2B;AACxC,SAAO,sBAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,iBAAGC,QAAH,CAAYH,QAAZ,EAAsB,UAACI,GAAD,EAAMC,IAAN,EAAe;AACnC,UAAID,GAAJ,EAAS;AACP,eAAOF,OAAOE,GAAP,CAAP;AACD;;AAED,UAAME,OAAO,iBAAKC,IAAL,CAAUF,KAAKG,QAAL,EAAV,CAAb;AACA,UAAMC,UAAU;AACdC,gBAAQ,CAAC,UAAD,EAAa,QAAb,CADM;AAEdC,uBAAe;AACbC,0BAAgB,wBAACC,GAAD,EAAMC,QAAN,EAAmB;AACjCA,qBAAS,IAAT,EAAe,iBAAKP,IAAL,CAAUM,IAAIE,IAAd,CAAf;AACD;AAHY,SAFD;AAOdC,sBAAc,eAAKC,OAAL,CAAajB,QAAb;AAPA,OAAhB;;AAUA,iCAAYM,IAAZ,EAAkBG,OAAlB,EAA2BS,IAA3B,CAAgC,UAACC,MAAD,EAAY;AAC1C,YAAMC,OAAO,oBAAYD,OAAOE,IAAnB,EAAyBC,MAAzB,CAAgC,UAACC,QAAD,EAAWC,GAAX,EAAmB;AAC9D,cAAMC,OAAON,OAAOE,IAAP,CAAYG,GAAZ,CAAb;AACA,cAAIC,KAAKC,KAAT,EAAgB;AACdH,qBAASI,IAAT,CAAc,EAAEH,QAAF,EAAOE,OAAOD,KAAKC,KAAnB,EAAd;AACD;AACD,iBAAOH,QAAP;AACD,SANY,EAMV,EANU,CAAb;AAOA,YAAIH,KAAKQ,MAAT,EAAiB;AACf,iBAAO1B,OAAOkB,IAAP,CAAP;AACD;AACDnB,gBAAQkB,OAAOU,QAAf;AACD,OAZD,EAYGC,KAZH,CAYS5B,MAZT;AAaD,KA7BD;AA8BD,GA/BM,CAAP;AAgCD,C;;AAtCD;;;;AACA;;;;AACA;;AACA","file":"resolveExternalRefs.js","sourcesContent":["/**\n * Resolves external schema file references to create a single schema\n *\n * @package: swagger-schema-utils\n * @author:  pospi <sam@everledger.io>\n * @since:   2016-12-21\n * @flow\n */\n\nimport fs from 'fs';\nimport path from 'path';\nimport { resolveRefs } from 'json-refs';\nimport YAML from 'yaml-js';\n\nexport default function(filePath: string) {\n  return new Promise((resolve, reject) => {\n    fs.readFile(filePath, (err, file) => {\n      if (err) {\n        return reject(err);\n      }\n\n      const main = YAML.load(file.toString());\n      const options = {\n        filter: ['relative', 'remote'],\n        loaderOptions: {\n          processContent: (res, callback) => {\n            callback(null, YAML.load(res.text));\n          },\n        },\n        relativeBase: path.dirname(filePath),\n      };\n\n      resolveRefs(main, options).then((result) => {\n        const errs = Object.keys(result.refs).reduce((failures, ref) => {\n          const data = result.refs[ref];\n          if (data.error) {\n            failures.push({ ref, error: data.error });\n          }\n          return failures;\n        }, []);\n        if (errs.length) {\n          return reject(errs);\n        }\n        resolve(result.resolved);\n      }).catch(reject);\n    });\n  });\n}\n"]}